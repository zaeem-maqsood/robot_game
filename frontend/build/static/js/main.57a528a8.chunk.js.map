{"version":3,"sources":["components/Menu.js","robot.png","target.png","components/Square.js","components/Board.js","Axios.js","components/Game.js","components/Leaderboard.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","Row","className","Col","options","height","width","to","Button","variant","Square","props","rowPosition","columnPosition","robotPosition","targetPosition","direction","currentPosition","robotImage","Image","src","robot","_","isEqual","target","Board","rows","columns","Table","bordered","map","row","i","column","j","axios","Axios","create","baseURL","Game","history","useHistory","useState","highestScore","setHighestScore","score","setScore","gameOver","setGameOver","name","setName","error","setError","getRandomInt","max","Math","floor","random","directions","setDirection","setRobotPosition","randomTargetPosition","setTargetPosition","rotateLeftIcon","icon","faUndo","rotateRightIcon","faRedo","arrowUpIcon","faArrowUp","time","setTime","useEffect","get","then","response","console","log","data","highest_score","catch","err","interval","setInterval","clearInterval","Form","onSubmit","e","preventDefault","post","params","username","push","handleNameSubmit","lg","Group","controlId","Label","Control","type","maxLength","placeholder","onChange","value","Text","onClick","currentDirection","findIndex","element","Leaderboard","scores","setScores","striped","hover","index","id","App","Container","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57a528a8.chunk.js","sourcesContent":["import React from \"react\";\nimport Lottie from \"react-lottie\";\nimport { Link } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nimport animationData from \"../Animation/robot\";\n\nfunction Menu() {\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  return (\n    <>\n      <Row className=\"pt-5 text-center\">\n        <Col>\n          <Lottie options={defaultOptions} height={150} width={150} />\n        </Col>\n      </Row>\n      <Row className=\"pt-5 text-center\">\n        <Col>\n          <h1>ROBOT GAME</h1>\n        </Col>\n      </Row>\n      <Row className=\"pt-3 text-center\">\n        <Col>\n          <Link to=\"/game\">\n            <Button variant=\"primary\">New Game</Button>\n          </Link>\n        </Col>\n      </Row>\n      <Row className=\"pt-3 text-center\">\n        <Col>\n          <Link to=\"/leaderboard\">\n            <Button variant=\"success\">Leader Board</Button>\n          </Link>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default Menu;\n","export default __webpack_public_path__ + \"static/media/robot.aff1de80.png\";","export default __webpack_public_path__ + \"static/media/target.26d64e09.png\";","import React from \"react\";\nimport _ from \"lodash\";\nimport robot from \"../robot.png\";\nimport target from \"../target.png\";\n\nimport Image from \"react-bootstrap/Image\";\n\nfunction Square(props) {\n  const {\n    rowPosition,\n    columnPosition,\n    robotPosition,\n    targetPosition,\n    direction,\n  } = props;\n\n  const currentPosition = [rowPosition, columnPosition];\n  let className = \"robot\";\n\n  if (direction === \"N\") {\n    className += \" up\";\n  } else if (direction === \"E\") {\n    className += \" right\";\n  } else if (direction === \"W\") {\n    className += \" left\";\n  } else {\n  }\n\n  let robotImage = <Image src={robot} className={className}></Image>;\n\n  if (_.isEqual(robotPosition, currentPosition)) {\n    return (\n      <>\n        <td className=\"board-cell\">{robotImage}</td>\n      </>\n    );\n  } else if (_.isEqual(targetPosition, currentPosition)) {\n    return (\n      <>\n        <td className=\"board-cell\">\n          <Image src={target} className=\"target\" />\n        </td>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <td className=\"board-cell\"></td>\n      </>\n    );\n  }\n}\n\nexport default Square;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nimport Square from \"./Square\";\n\nfunction Board(props) {\n  const { rows, columns, robotPosition, targetPosition, direction } = props;\n\n  return (\n    <>\n      <Table bordered className=\"board\">\n        <tbody>\n          {rows.map((row, i) => {\n            return (\n              <tr key={i}>\n                {columns.map((column, j) => {\n                  return (\n                    <Square\n                      key={j}\n                      rowPosition={i}\n                      columnPosition={j}\n                      robotPosition={robotPosition}\n                      targetPosition={targetPosition}\n                      direction={direction}\n                    ></Square>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </>\n  );\n}\n\nexport default Board;\n","import Axios from \"axios\";\n\n// Local Dev\nexport const axios = Axios.create({\n  baseURL: \"http://localhost/api/\",\n});\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport Board from \"./Board\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndo, faRedo, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { axios } from \"../Axios\";\n\nfunction Game() {\n  let history = useHistory();\n\n  const [highestScore, setHighestScore] = useState(0);\n\n  // State variable to keep track of the score\n  const [score, setScore] = useState(0);\n\n  const [gameOver, setGameOver] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Function to generate random numbers\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  // Define row and columns\n  const rows = [0, 1, 2, 3, 4];\n  const columns = [0, 1, 2, 3, 4];\n\n  // Possible directions the roobot can travel in\n  const directions = [\"N\", \"E\", \"S\", \"W\"];\n\n  // State variable to keep track of the robot's direction\n  const [direction, setDirection] = useState(\"N\");\n\n  // State variable to keep track of the robot's position\n  const [robotPosition, setRobotPosition] = useState([2, 2]);\n\n  // Generate a random spot on the board for the target\n  let randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n\n  // Make sure the randomly generated spot for the target is not the same as the robot's position\n  while (_.isEqual(randomTargetPosition, robotPosition)) {\n    randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n  }\n\n  // State variable to keep track of the target's position\n  const [targetPosition, setTargetPosition] = useState(randomTargetPosition);\n\n  // Icons\n  const rotateLeftIcon = <FontAwesomeIcon icon={faUndo} />;\n  const rotateRightIcon = <FontAwesomeIcon icon={faRedo} />;\n  const arrowUpIcon = <FontAwesomeIcon icon={faArrowUp} />;\n\n  // Set Timer\n  const [time, setTime] = useState([60]);\n\n  useEffect(() => {\n    const apiUrl = \"scores/current-highest-score\";\n    axios\n      .get(apiUrl)\n      .then((response) => {\n        console.log(response.data);\n        setHighestScore(response.data.highest_score);\n      })\n      .catch((err) => console.log(err));\n  });\n\n  // Re-render the page every second\n  useEffect(() => {\n    if (!gameOver) {\n      let interval = setInterval(() => setTime((time) => time - 1), 1000);\n\n      if (time === 0) {\n        console.log(\"Time Ran out\");\n        setGameOver(true);\n      }\n      return () => clearInterval(interval);\n    }\n  }, [time, history, gameOver]);\n\n  //   Function to handle right rotation of Robot\n  const rotateRight = () => {\n    const currentDirection = directions.findIndex((element) => {\n      return element === direction;\n    });\n\n    if (currentDirection === 3) {\n      setDirection(directions[0]);\n    } else {\n      setDirection(directions[currentDirection + 1]);\n    }\n  };\n\n  // Function to handle left rotation of Robot\n  const rotateLeft = () => {\n    const currentDirection = directions.findIndex((element) => {\n      return element === direction;\n    });\n\n    if (currentDirection === 0) {\n      setDirection(directions[3]);\n    } else {\n      setDirection(directions[currentDirection - 1]);\n    }\n  };\n\n  // Function to handle forward movement of Robot\n  const moveForward = () => {\n    if (direction === \"N\") {\n      if (robotPosition[0] !== 0) {\n        setRobotPosition([robotPosition[0] - 1, robotPosition[1]]);\n      } else {\n        setGameOver(true);\n      }\n    }\n\n    if (direction === \"E\") {\n      if (robotPosition[1] !== 4) {\n        setRobotPosition([robotPosition[0], robotPosition[1] + 1]);\n      } else {\n        setGameOver(true);\n      }\n    }\n\n    if (direction === \"S\") {\n      if (robotPosition[0] !== 4) {\n        setRobotPosition([robotPosition[0] + 1, robotPosition[1]]);\n      } else {\n        setGameOver(true);\n      }\n    }\n\n    if (direction === \"W\") {\n      if (robotPosition[1] !== 0) {\n        setRobotPosition([robotPosition[0], robotPosition[1] - 1]);\n      } else {\n        setGameOver(true);\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Robot position is \" + robotPosition);\n    console.log(\"Target Position is \" + targetPosition);\n\n    if (_.isEqual(robotPosition, targetPosition)) {\n      console.log(\"Got the Target!!\");\n      //   Get a spot on the board for the target\n      let randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n\n      //   Make sure the randomly generated spot for the target is not the same as the robot's position\n      while (_.isEqual(randomTargetPosition, robotPosition)) {\n        randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n      }\n      setTargetPosition(randomTargetPosition);\n\n      setScore((score) => score + 1);\n    }\n  }, [robotPosition, targetPosition, setScore]);\n\n  const handleNameSubmit = (e) => {\n    e.preventDefault();\n\n    if (name < 3 && name > 20) {\n      setError(\n        \"Name must be contain at least 3 characters and less than 20 characters\"\n      );\n    } else {\n      console.log(\"Submit Name\");\n      setError(\"\");\n      const apiUrl = \"scores/set-score\";\n      axios\n        .post(apiUrl, {\n          params: {\n            username: name,\n            score: score,\n          },\n        })\n        .then((response) => {\n          console.log(response.data);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n\n      history.push(\"/menu\");\n    }\n  };\n\n  if (gameOver) {\n    return (\n      <>\n        <Form onSubmit={(e) => handleNameSubmit(e)}>\n          <Row className=\"pt-5 text-center justify-content-center\">\n            <Col lg={4}>\n              {score > highestScore ? <h1>New Highscore!</h1> : \"\"}\n              <h3>Congratulations you scored {score} points</h3>\n              <p>Record your name for be entered into the leaderboard.</p>\n            </Col>\n          </Row>\n          <Row className=\"pt-3 justify-content-center\">\n            <Col lg={4}>\n              <Form.Group className=\"mb-3\" controlId=\"formName\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  type=\"name\"\n                  maxLength=\"20\"\n                  placeholder=\"Enter Name\"\n                  onChange={(e) => setName(e.target.value)}\n                />\n                <Form.Text className=\"text-muted\">Max Characters: 20</Form.Text>\n                <p className=\"error\">{error}</p>\n              </Form.Group>\n            </Col>\n          </Row>\n          <Row className=\"pt-3 text-center justify-content-center\">\n            <Col lg={4}>\n              <Button variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n            </Col>\n          </Row>\n          <Row className=\"pt-3 text-center justify-content-center\">\n            <Col lg={4}>\n              <Button\n                variant=\"success\"\n                type=\"submit\"\n                onClick={(e) => {\n                  setGameOver(false);\n                  setScore(0);\n                  setTime(60);\n                }}\n              >\n                Play Again\n              </Button>\n            </Col>\n          </Row>\n          <Row className=\"pt-3 text-center justify-content-center\">\n            <Col lg={4}>\n              <Button\n                variant=\"warning\"\n                type=\"submit\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  history.push(\"/menu\");\n                }}\n              >\n                Menu\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Row className=\"pt-5 text-center\">\n          <Col>\n            <h3>Score: {score}</h3>\n          </Col>\n          <Col>\n            <h3>Time: {time}</h3>\n          </Col>\n        </Row>\n        <Row className=\"pt-3\">\n          <Col>\n            <Board\n              rows={rows}\n              columns={columns}\n              targetPosition={targetPosition}\n              robotPosition={robotPosition}\n              direction={direction}\n            ></Board>\n          </Col>\n        </Row>\n        <Row className=\"pt-5\">\n          <Col>\n            <div className=\"d-grid gap-2\">\n              <Button onClick={rotateLeft} variant=\"primary\">\n                {rotateLeftIcon}\n              </Button>\n            </div>\n          </Col>\n          <Col>\n            <div className=\"d-grid gap-2\">\n              <Button onClick={moveForward} variant=\"primary\">\n                {arrowUpIcon}\n              </Button>\n            </div>\n          </Col>\n          <Col>\n            <div className=\"d-grid gap-2\">\n              <Button onClick={rotateRight} variant=\"primary\">\n                {rotateRightIcon}\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { axios } from \"../Axios\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/esm/Button\";\n\nfunction Leaderboard() {\n  const [scores, setScores] = useState([]);\n\n  useEffect(() => {\n    const apiUrl = \"scores/\";\n    axios\n      .get(apiUrl)\n      .then((response) => {\n        console.log(response.data);\n        setScores(response.data);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <>\n      <Row className=\"pt-5\">\n        <Col>\n          <h1>Leaderboard</h1>\n          <Link to=\"/menu\">\n            <Button variant=\"warning\">Back To Menu</Button>\n          </Link>\n        </Col>\n      </Row>\n      <Row className=\"pt-3\">\n        <Table striped hover>\n          <thead>\n            <tr>\n              <th>Rank</th>\n              <th>Name</th>\n              <th>Score</th>\n            </tr>\n          </thead>\n          <tbody>\n            {scores.map((score, index) => {\n              return (\n                <tr key={score.id}>\n                  <td>{index + 1}</td>\n                  <td>{score.username}</td>\n                  <td>{score.score}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </Row>\n    </>\n  );\n}\n\nexport default Leaderboard;\n","import \"./App.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\n\nimport Menu from \"./components/Menu\";\nimport Game from \"./components/Game\";\nimport Leaderboard from \"./components/Leaderboard\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Container>\n          <Switch>\n            <Route path=\"/leaderboard\">\n              <Leaderboard></Leaderboard>\n            </Route>\n            <Route path=\"/game\">\n              <Game></Game>\n            </Route>\n            <Route path=\"/\">\n              <Menu></Menu>\n            </Route>\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}