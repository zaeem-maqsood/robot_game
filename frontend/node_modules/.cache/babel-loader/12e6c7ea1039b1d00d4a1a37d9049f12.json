{"ast":null,"code":"var _jsxFileName = \"/Users/zaeemmaqsood/Desktop/robot_game/frontend/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport Board from \"./Board\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndo, faRedo, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  // Function to generate random numbers\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  } // State variable to keep track of the score\n\n\n  const [score, setScore] = useState(0); // Define row and columns\n\n  const rows = [0, 1, 2, 3, 4];\n  const columns = [0, 1, 2, 3, 4]; // Possible directions the roobot can travel in\n\n  const directions = [\"N\", \"E\", \"S\", \"W\"]; // State variable to keep track of the robot's direction\n\n  const [direction, setDirection] = useState(\"N\"); // State variable to keep track of the robot's position\n\n  const [robotPosition, setRobotPosition] = useState([2, 2]); // Generate a random spot on the board for the target\n\n  let randomTargetPosition = [getRandomInt(5), getRandomInt(5)]; // Make sure the randomly generated spot for the target is not the same as the robot's position\n\n  while (_.isEqual(randomTargetPosition, robotPosition)) {\n    randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n  } // State variable to keep track of the target's position\n\n\n  const [targetPosition, setTargetPosition] = useState(randomTargetPosition); // Icons\n\n  const rotateLeftIcon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: faUndo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 26\n  }, this);\n\n  const rotateRightIcon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: faRedo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 27\n  }, this);\n\n  const arrowUpIcon = /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n    icon: faArrowUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this); //   Function to handle right rotation of Robot\n\n\n  const rotateRight = () => {\n    const currentDirection = directions.findIndex(element => {\n      return element === direction;\n    });\n\n    if (currentDirection === 3) {\n      setDirection(directions[0]);\n    } else {\n      setDirection(directions[currentDirection + 1]);\n    }\n  }; // Function to handle left rotation of Robot\n\n\n  const rotateLeft = () => {\n    const currentDirection = directions.findIndex(element => {\n      return element === direction;\n    });\n\n    if (currentDirection === 0) {\n      setDirection(directions[3]);\n    } else {\n      setDirection(directions[currentDirection - 1]);\n    }\n  };\n\n  const moveForward = () => {\n    if (direction === \"N\") {\n      if (robotPosition[0] !== 0) {\n        setRobotPosition([robotPosition[0] - 1, robotPosition[1]]);\n      }\n    }\n\n    if (direction === \"E\") {\n      if (robotPosition[1] !== 4) {\n        setRobotPosition([robotPosition[0], robotPosition[1] + 1]);\n      }\n    }\n\n    if (direction === \"S\") {\n      if (robotPosition[0] !== 4) {\n        setRobotPosition([robotPosition[0] + 1, robotPosition[1]]);\n      }\n    }\n\n    if (direction === \"W\") {\n      if (robotPosition[1] !== 0) {\n        setRobotPosition([robotPosition[0], robotPosition[1] - 1]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Robot position is \" + robotPosition);\n    console.log(\"Target Position is \" + targetPosition);\n\n    if (_.isEqual(robotPosition, targetPosition)) {\n      console.log(\"Got the Target!!\"); //   Get a spot on the board for the target\n\n      let randomTargetPosition = [getRandomInt(5), getRandomInt(5)]; //   Make sure the randomly generated spot for the target is not the same as the robot's position\n\n      while (_.isEqual(randomTargetPosition, robotPosition)) {\n        randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n      }\n\n      setTargetPosition(randomTargetPosition);\n      setScore(score => score + 1);\n    }\n  }, [robotPosition]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"pt-5\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"pt-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          rows: rows,\n          columns: columns,\n          targetPosition: targetPosition,\n          robotPosition: robotPosition,\n          direction: direction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"pt-5\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-grid gap-2\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: rotateLeft,\n            variant: \"primary\",\n            children: rotateLeftIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-grid gap-2\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: moveForward,\n            variant: \"primary\",\n            children: arrowUpIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-grid gap-2\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: rotateRight,\n            variant: \"primary\",\n            children: rotateRightIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"O63vXfFgupX2zSNsO0UBb1kNCBI=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/zaeemmaqsood/Desktop/robot_game/frontend/src/components/Game.js"],"names":["React","useEffect","useState","_","Board","Row","Col","Button","FontAwesomeIcon","faUndo","faRedo","faArrowUp","Game","getRandomInt","max","Math","floor","random","score","setScore","rows","columns","directions","direction","setDirection","robotPosition","setRobotPosition","randomTargetPosition","isEqual","targetPosition","setTargetPosition","rotateLeftIcon","rotateRightIcon","arrowUpIcon","rotateRight","currentDirection","findIndex","element","rotateLeft","moveForward","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport Board from \"./Board\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUndo, faRedo, faArrowUp } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Game() {\n  // Function to generate random numbers\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  // State variable to keep track of the score\n  const [score, setScore] = useState(0);\n\n  // Define row and columns\n  const rows = [0, 1, 2, 3, 4];\n  const columns = [0, 1, 2, 3, 4];\n\n  // Possible directions the roobot can travel in\n  const directions = [\"N\", \"E\", \"S\", \"W\"];\n\n  // State variable to keep track of the robot's direction\n  const [direction, setDirection] = useState(\"N\");\n\n  // State variable to keep track of the robot's position\n  const [robotPosition, setRobotPosition] = useState([2, 2]);\n\n  // Generate a random spot on the board for the target\n  let randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n\n  // Make sure the randomly generated spot for the target is not the same as the robot's position\n  while (_.isEqual(randomTargetPosition, robotPosition)) {\n    randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n  }\n\n  // State variable to keep track of the target's position\n  const [targetPosition, setTargetPosition] = useState(randomTargetPosition);\n\n  // Icons\n  const rotateLeftIcon = <FontAwesomeIcon icon={faUndo} />;\n  const rotateRightIcon = <FontAwesomeIcon icon={faRedo} />;\n  const arrowUpIcon = <FontAwesomeIcon icon={faArrowUp} />;\n\n  //   Function to handle right rotation of Robot\n  const rotateRight = () => {\n    const currentDirection = directions.findIndex((element) => {\n      return element === direction;\n    });\n\n    if (currentDirection === 3) {\n      setDirection(directions[0]);\n    } else {\n      setDirection(directions[currentDirection + 1]);\n    }\n  };\n\n  // Function to handle left rotation of Robot\n  const rotateLeft = () => {\n    const currentDirection = directions.findIndex((element) => {\n      return element === direction;\n    });\n\n    if (currentDirection === 0) {\n      setDirection(directions[3]);\n    } else {\n      setDirection(directions[currentDirection - 1]);\n    }\n  };\n\n  const moveForward = () => {\n    if (direction === \"N\") {\n      if (robotPosition[0] !== 0) {\n        setRobotPosition([robotPosition[0] - 1, robotPosition[1]]);\n      }\n    }\n\n    if (direction === \"E\") {\n      if (robotPosition[1] !== 4) {\n        setRobotPosition([robotPosition[0], robotPosition[1] + 1]);\n      }\n    }\n\n    if (direction === \"S\") {\n      if (robotPosition[0] !== 4) {\n        setRobotPosition([robotPosition[0] + 1, robotPosition[1]]);\n      }\n    }\n\n    if (direction === \"W\") {\n      if (robotPosition[1] !== 0) {\n        setRobotPosition([robotPosition[0], robotPosition[1] - 1]);\n      }\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Robot position is \" + robotPosition);\n    console.log(\"Target Position is \" + targetPosition);\n\n    if (_.isEqual(robotPosition, targetPosition)) {\n      console.log(\"Got the Target!!\");\n      //   Get a spot on the board for the target\n      let randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n\n      //   Make sure the randomly generated spot for the target is not the same as the robot's position\n      while (_.isEqual(randomTargetPosition, robotPosition)) {\n        randomTargetPosition = [getRandomInt(5), getRandomInt(5)];\n      }\n      setTargetPosition(randomTargetPosition);\n\n      setScore((score) => score + 1);\n    }\n  }, [robotPosition]);\n\n  return (\n    <>\n      <Row className=\"pt-5\">\n        <Col>\n          <h3>Score: {score}</h3>\n        </Col>\n      </Row>\n      <Row className=\"pt-3\">\n        <Col>\n          <Board\n            rows={rows}\n            columns={columns}\n            targetPosition={targetPosition}\n            robotPosition={robotPosition}\n            direction={direction}\n          ></Board>\n        </Col>\n      </Row>\n      <Row className=\"pt-5\">\n        <Col>\n          <div className=\"d-grid gap-2\">\n            <Button onClick={rotateLeft} variant=\"primary\">\n              {rotateLeftIcon}\n            </Button>\n          </div>\n        </Col>\n        <Col>\n          <div className=\"d-grid gap-2\">\n            <Button onClick={moveForward} variant=\"primary\">\n              {arrowUpIcon}\n            </Button>\n          </div>\n        </Col>\n        <Col>\n          <div className=\"d-grid gap-2\">\n            <Button onClick={rotateRight} variant=\"primary\">\n              {rotateRightIcon}\n            </Button>\n          </div>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}